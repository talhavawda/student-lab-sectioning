##SOURCE: https://www.unitime.org/text.php?file=sect_v13

## Student Sectioning Solver Configuration File
## Use with CPSolver 1.3 or later
## Name: Student Sectioning Default Configuration
## Date: Tue Oct 12 23:12:00 SAST 2021
######################################

## General Parameters
######################################
## Student sectioning termination class
## Type: text
Termination.Class=org.cpsolver.ifs.termination.MPPTerminationCondition
## Stop when a complete solution is found
## Type: boolean
## Initial Value = false
Termination.StopWhenComplete=true
## Maximal solver time (in sec)
## Type: integer
##Initial value = 28800
Termination.TimeOut=100
## MPP
General.MPP=true
## Upper bound/limit of the number of perturbances (number of existing variables that had its allocation changed) we can allow for
## if zero or positive, solver stops when the solution is complete and the number of variables with non-initial values is below or equal to this limit
Termination.MinPerturbances=0
Value.MPPLimit=0
## Student sectioning solution comparator class
## Type: text
# Comparator.Class=org.cpsolver.studentsct.weights.PriorityStudentWeights
Comparator.Class=org.cpsolver.studentsct.weights.EqualStudentWeights
# Comparator.Class=org.cpsolver.ifs.solution.MPPSolutionComparator
## Student sectioning value selection class
## Type: text
Value.Class=org.cpsolver.studentsct.heuristics.EnrollmentSelection
# Value.Class=org.cpsolver.ifs.heuristics.GeneralValueSelection
## CBS weight
## Type: double
Value.WeightConflicts=1.0 # think about changing this
## Number of past assignments weight
## Type: double
Value.WeightNrAssignments=0.0

Value.InitialSelectionProb=0.5

## Student sectioning variable selection class
## Type: text
Variable.Class=org.cpsolver.ifs.heuristics.GeneralVariableSelection
Variable.RandomSelection=true
## Student sectioning neighbour selection class
## Type: text
Neighbour.Class=org.cpsolver.studentsct.heuristics.StudentSctNeighbourSelection
## Save best even when no complete solution is found
## Type: integer
General.SaveBestUnassigned=0
## Use student distance conflicts
## Type: boolean
StudentSct.StudentDist=false
## Use conflict-based statistics
## Type: boolean
StudentSct.CBS=true
## Load real student requests
## Type: boolean
Load.IncludeCourseDemands=true
## Load last-like course demands (deprecated)
## Type: boolean
Load.IncludeLastLikeStudents=false
## Section limit constraint: favour unassignment of last-like course requests
## Type: boolean
SectionLimit.PreferDummyStudents=false
## Last-like student request weight
## Type: double
Student.DummyStudentWeight=0.01
## Branch&bound: If true, section penalties (instead of section values) are minimized
## Type: boolean
Neighbour.BranchAndBoundMinimizePenalty=false
## Branch&bound: Timeout for each neighbour selection (in milliseconds)
## Type: integer
Neighbour.BranchAndBoundTimeout=5000
## Random Unassignment: Probability of a random selection of a student
## Type: double
Neighbour.RandomUnassignmentProb=0.5
## Random Unassignment: Probability of a random selection of a problematic student
## Type: double
# LOWERING THIS VALUE SEEMS TO INCREASE NUMBER OF PERMUTATIONS
Neighbour.RandomUnassignmentOfProblemStudentProb=0.9
## Student Swap: Timeout for each neighbour selection (in milliseconds)
## Type: integer
Neighbour.SwapStudentsTimeout=5000
## Student Swap: Limit for the number of considered values for each course request
## Type: integer
Neighbour.SwapStudentsMaxValues=100
## Backtrack: Limit on the number of enrollments to be visited of each course request
## Type: integer
Neighbour.MaxValues=100
## Backtrack: Timeout for each neighbour selection (in milliseconds)
## Type: integer
Neighbour.BackTrackTimeout=5000
## Backtrack: Search depth
## Type: integer
Neighbour.BackTrackDepth=4
## More precise (but slower) computation of enrollments of a course request while skipping enrollments with the same times
## Type: boolean
CourseRequest.SameTimePrecise=true
## Use time overlaps
## Type: boolean
StudentSct.TimeOverlaps=true
## Tweak class limits to fit all enrolled students
## Type: boolean
Load.TweakLimits=false
## Allow over limit for individual reservations
## Type: boolean
Reservation.CanAssignOverTheLimit=true

## Student Weights
######################################
## Priority
## Type: double
StudentWeights.Priority=0.5010
## First alternative
## Type: double
StudentWeights.FirstAlternative=0.5010
## Second alternative
## Type: double
StudentWeights.SecondAlternative=0.2510
## Distance conflict
## Type: double
StudentWeights.DistanceConflict=0.0100
## Time overlap
## Type: double
StudentWeights.TimeOverlapFactor=0.5000
## Time overlap limit
## Type: double
StudentWeights.TimeOverlapMaxLimit=0.5000
## Section balancing
## Type: double
StudentWeights.BalancingFactor=0.0050
## Alternative request (equal weights)
## Type: double
StudentWeights.AlternativeRequestFactor=0.1260
## Spread leftover weight equaly
## Type: boolean
StudentWeights.LeftoverSpread=false
## Projected student request
## Type: double
StudentWeights.ProjectedStudentWeight=0.0100

## Other Properties
######################################
# Number of solver threads
Parallel.NrSolvers=4
# Anonymize XML file (no names)
Xml.ShowNames=true
# Use priority weighting
# StudentWeights.Class=org.cpsolver.studentsct.weights.PriorityStudentWeights
StudentWeights.Class=org.cpsolver.studentsct.weights.EqualStudentWeights
# Extensions: CBS + distance conflicts + time overlaps
# Dont take out DistanceConflict - num perturbances goes up
Extensions.Classes=org.cpsolver.studentsct.extension.StudentConflictStatistics;org.cpsolver.studentsct.extension.DistanceConflict;org.cpsolver.studentsct.extension.TimeOverlapsCounter
# Distance ellipsoid
# Type: enum(LEGACY,WGS84,GRS80,Airy1830,Intl1924,Clarke1880,GRS67)
Distances.Ellipsoid=LEGACY